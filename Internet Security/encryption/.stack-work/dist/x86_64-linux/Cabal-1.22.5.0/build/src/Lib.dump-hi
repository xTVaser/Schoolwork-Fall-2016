
==================== FINAL INTERFACE ====================
2016-09-14 14:57:52.329023 UTC

interface encry_EOgpKxzfJmICS2a9k914ug:Lib 7103
  interface hash: 03f9296341be51e266a4ff4efe1a4da0
  ABI hash: aad1949cbf806445dbd2feb6b18e530e
  export-list hash: c716cdc23fa0b7fda3f495b6246cd915
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.aesEncrypt
  Lib.bEncrypt
  Lib.desEncrypt
  Lib.md5Encrypt
  Lib.menuOptions
  Lib.printOption
  Lib.rsaEncrypt
  Lib.validSelection
module dependencies:
package dependencies: Crypto-4.2.5.1@Crypt_5LAkHcbhlXQ7c0SgiMzGrF
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Generics
import  -/  Crypto-4.2.5.1@Crypt_5LAkHcbhlXQ7c0SgiMzGrF:Codec.Encryption.AES 442ac9a9d5326f1e6d9b6ed3563675fc
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Char8 53a1cf100554bc244cf2a8a175681688
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
11ac1073ba83a765fb65800e50aae14f
  aesEncrypt :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ iStr :: GHC.Base.String ->
                 case Data.ByteString.Internal.unsafePackLenChars
                        (case GHC.List.$wlenAcc @ GHC.Types.Char iStr 0 of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 })
                        iStr of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.ByteString.Internal.$wunpackAppendCharsLazy
                   ww1
                   ww2
                   ww3
                   ww4
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
84f987b36545e22f6678daa89d9e62aa
  bEncrypt :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ iStr :: GHC.Base.String -> Lib.bEncrypt1) -}
f37ca4be66503d28a0811b6bbcb580c0
  bEncrypt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BCrypt"#) -}
3d1ec20b502a6425249f1d200ed96b45
  desEncrypt :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ iStr :: GHC.Base.String -> Lib.desEncrypt1) -}
86eeb042f01129fcae93e73b386cb485
  desEncrypt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DES"#) -}
57acd860fc04cb0e1ce7bd6af2293b7b
  md5Encrypt :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ iStr :: GHC.Base.String -> Lib.md5Encrypt1) -}
c0f414b234ea1d552961f13dcb8ea2fb
  md5Encrypt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MD5"#) -}
5c7c344dcaa0f393fd328bc552a51cb8
  menuOptions ::
    GHC.Base.String
    -> [(GHC.Types.Int, (GHC.Base.String, GHC.Base.String))]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Base.String ->
                 GHC.List.zip
                   @ GHC.Types.Int
                   @ (GHC.Base.String, GHC.Base.String)
                   Lib.menuOptions15
                   (GHC.Types.:
                      @ (GHC.Base.String, GHC.Base.String)
                      (Lib.menuOptions14,
                       case Data.ByteString.Internal.unsafePackLenChars
                              (case GHC.List.$wlenAcc @ GHC.Types.Char s 0 of ww2 { DEFAULT ->
                               GHC.Types.I# ww2 })
                              s of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                       Data.ByteString.Internal.$wunpackAppendCharsLazy
                         ww1
                         ww2
                         ww3
                         ww4
                         (GHC.Types.[] @ GHC.Types.Char) })
                      Lib.menuOptions1)) -}
8e1d779041402038869a725e80522245
  menuOptions1 :: [(GHC.Base.String, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, GHC.Base.String)
                   Lib.menuOptions11
                   Lib.menuOptions2) -}
616682117a08b7beae2c042d908d2407
  menuOptions10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bcrypt"#) -}
f10fa53938845ebae4ce5ef5603f504c
  menuOptions11 :: ([GHC.Types.Char], GHC.Base.String)
  {- Unfolding: ((Lib.menuOptions13, Lib.menuOptions12)) -}
3b2a74820486d1b220422930edcbdac1
  menuOptions12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RSA"#) -}
2d8d06091299da3ec8e8d6f2c7763190
  menuOptions13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RSA Encryption"#) -}
261afc5c138fbca7f202bc78b1952d48
  menuOptions14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AES Encryption"#) -}
07d9cab5767caf7e384b95dd7510aabb
  menuOptions15 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1 9223372036854775807) -}
d43795f082ee9397e9598112b6df9526
  menuOptions2 :: [(GHC.Base.String, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, GHC.Base.String)
                   Lib.menuOptions9
                   Lib.menuOptions3) -}
dc1d3e86710a0bb20a11e3f08063ec8f
  menuOptions3 :: [(GHC.Base.String, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, GHC.Base.String)
                   Lib.menuOptions7
                   Lib.menuOptions4) -}
8535dba4e801990e7530a5235fd7c078
  menuOptions4 :: [(GHC.Base.String, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, GHC.Base.String)
                   Lib.menuOptions5
                   (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
09720f0865e409bf3e5436d48d1b4e47
  menuOptions5 :: ([GHC.Types.Char], GHC.Base.String)
  {- Unfolding: ((Lib.menuOptions6, Lib.md5Encrypt1)) -}
67d63e15f8244bed82d8488720b2dc86
  menuOptions6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MD5 Encryption"#) -}
8d31b8d80a021942c2da8aac016c0ca8
  menuOptions7 :: ([GHC.Types.Char], GHC.Base.String)
  {- Unfolding: ((Lib.menuOptions8, Lib.desEncrypt1)) -}
f6cde84b6d581663a76e7b1f88fb3429
  menuOptions8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DES Encryption"#) -}
2018b9927dfc1fba883097cadefd0719
  menuOptions9 :: ([GHC.Types.Char], GHC.Base.String)
  {- Unfolding: ((Lib.menuOptions10, Lib.bEncrypt1)) -}
9565b6b0fb36216eb0d83906bddc9450
  printOption :: GHC.Types.Int -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.printOption1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6ad23f1b2634f215889f6525fdd1f390
  printOption1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U><L,U>,
     Unfolding: (\ n :: GHC.Types.Int
                   oStr :: GHC.Base.String
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Original String: "#
                           (GHC.Base.++ @ GHC.Types.Char oStr Lib.printOption2))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.List.$w!!
                           @ (GHC.Types.Int, (GHC.Base.String, GHC.Base.String))
                           (Lib.menuOptions oStr)
                           (GHC.Prim.-# x 1) of wild1 { (,) ds2 y ->
                    case y of wild2 { (,) x1 ds3 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      x1
                      (GHC.CString.unpackAppendCString#
                         ": "#
                         (GHC.Base.++ @ GHC.Types.Char ds3 Lib.printOption2)) } } })
                   GHC.Types.True
                   ipv }) -}
7a7592ede350ff541738dee48cf556a8
  printOption2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
2816db1ab7156f80e3b85698e3ae33eb
  rsaEncrypt :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ iStr :: GHC.Base.String -> Lib.menuOptions12) -}
377057274cdd407dfd204102225e1f04
  validSelection :: GHC.Base.String -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ str :: GHC.Base.String ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Int
                        Lib.validSelection4
                        str of wild {
                   [] -> GHC.Base.Nothing @ GHC.Types.Int
                   : ds ds1
                   -> case ds of wild1 { (,) n ds2 ->
                      case n of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x 1) of wild3 {
                        GHC.Types.False
                        -> case Lib.validSelection1 of wild4 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x y) of wild5 {
                             GHC.Types.False -> GHC.Base.Just @ GHC.Types.Int wild2
                             GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int } }
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int } } } }) -}
bb5cf20e037aa9546106e28dca49f685
  validSelection1 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ (GHC.Types.Int, (GHC.Base.String, GHC.Base.String))
                        Lib.validSelection2
                        0 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
1c1a1af03c1f416a6b27f38030229060
  validSelection2 ::
    [(GHC.Types.Int, (GHC.Base.String, GHC.Base.String))]
  {- Unfolding: (Lib.menuOptions Lib.validSelection3) -}
54a9f716e1155052ae9a53f1d6351f2c
  validSelection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "user input"#) -}
c0315f861535f593829096227ce6fd7c
  validSelection4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ GHC.Types.Int)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

