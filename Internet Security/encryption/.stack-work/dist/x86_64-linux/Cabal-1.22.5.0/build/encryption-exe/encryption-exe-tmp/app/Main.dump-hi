
==================== FINAL INTERFACE ====================
2016-09-14 14:57:52.874374 UTC

interface main@main:Main 7103
  interface hash: 43c52076971631c1749c2dd5a68c7746
  ABI hash: b7e13600dd8c55fad7101f627e0dce8d
  export-list hash: d392d4051275dfba4e9ab700f67154e4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2034a7bfc47a6a242d640d7907284d3e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.menu
module dependencies:
package dependencies: Crypto-4.2.5.1@Crypt_5LAkHcbhlXQ7c0SgiMzGrF
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      encryption-0.1.0.0@encry_EOgpKxzfJmICS2a9k914ug ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  encryption-0.1.0.0@encry_EOgpKxzfJmICS2a9k914ug:Lib aad1949cbf806445dbd2feb6b18e530e
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
72d7466a3e3d05a3883d00b3d63cd15d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
975d8a1a352ef6917eeb1f06540b1c6c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Data.OldList.unlines
                           (GHC.Base.map
                              @ (GHC.Types.Int, ([GHC.Types.Char], GHC.Base.String))
                              @ [GHC.Types.Char]
                              Main.main3
                              (Lib.menuOptions ipv3)))
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Int
                        Lib.validSelection4
                        ipv7 of wild {
                   []
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv6
                   : ds ds5
                   -> case ds of wild1 { (,) n ds6 ->
                      case n of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x 1) of wild3 {
                        GHC.Types.False
                        -> case Lib.validSelection1 of wild4 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x y) of wild5 {
                             GHC.Types.False -> Lib.printOption1 wild2 ipv3 ipv6
                             GHC.Types.True
                             -> GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.main2
                                  GHC.Types.True
                                  ipv6 } }
                        GHC.Types.True
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main2
                             GHC.Types.True
                             ipv6 } } } } } } } }) -}
5554bfb81da97b793006356c89d3df89
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Please try again"#) -}
69eb1d052ec0f9943e9acece1cb617d0
  main3 ::
    (GHC.Types.Int, ([GHC.Types.Char], GHC.Base.String))
    -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: (GHC.Types.Int,
                          ([GHC.Types.Char], GHC.Base.String)) ->
                 case ds of wild { (,) i ds1 ->
                 case ds1 of wild1 { (,) s ds2 ->
                 case i of ww2 { GHC.Types.I# ww3 ->
                 case GHC.Show.$wshowSignedInt
                        0
                        ww3
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   (GHC.CString.unpackAppendCString# ".) "# s) } } } }) -}
e71fcbbaefab0c0f516e2a998594c1d3
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Enter some text to be encrypted: "#) -}
96e13731780e3a10f95820842a1f7033
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
007c49105f22ac97c4edde2f76581af2
  menu :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

