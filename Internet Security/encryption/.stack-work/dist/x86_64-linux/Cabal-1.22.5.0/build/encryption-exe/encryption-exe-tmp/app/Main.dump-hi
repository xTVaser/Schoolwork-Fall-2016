
==================== FINAL INTERFACE ====================
2016-09-11 19:36:39.754559 UTC

interface main@main:Main 7103
  interface hash: 7763a3de57dea9360a259e5de4b52fa2
  ABI hash: 1455678b9907b6d2afff1d9d746144e0
  export-list hash: 3e5db6a2e6b3cccc995376cb2abfea26
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2034a7bfc47a6a242d640d7907284d3e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.bar
  Main.foo
  Main.main
  Main.menu
module dependencies:
package dependencies: base-4.8.2.0*
                      encryption-0.1.0.0@encry_GhOzz4XK2170QtKajfnlYr ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  encryption-0.1.0.0@encry_GhOzz4XK2170QtKajfnlYr:Lib 8404f3efcf59c38e69e6efb6def7fcbf
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
31e767469eafdc838625107a11b3cb5e
  bar :: t
  {- Strictness: b,
     Unfolding: InlineRule (0, True, True) GHC.Err.undefined -}
c6828953de5f3b7edbfabd47465509c2
  foo :: t
  {- Strictness: b,
     Unfolding: InlineRule (0, True, True) GHC.Err.undefined -}
1865bc7a5d26f0cb442dc4706d90279d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
421f10f78903086f27c3f6b652375b07
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Int
                        Lib.validSelection2
                        ipv7 of wild {
                   []
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv6
                   : ds ds5
                   -> case ds of wild1 { (,) n ds6 ->
                      case n of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x 1) of wild3 {
                        GHC.Types.False
                        -> case Lib.validSelection1 of wild4 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x y) of wild5 {
                             GHC.Types.False -> Lib.printOption1 wild2 ipv3 ipv6
                             GHC.Types.True
                             -> GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.main2
                                  GHC.Types.True
                                  ipv6 } }
                        GHC.Types.True
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main2
                             GHC.Types.True
                             ipv6 } } } } } } } }) -}
5554bfb81da97b793006356c89d3df89
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Please try again"#) -}
d02d5527e7aa83313aeb7b5b95c5df42
  main3 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines Main.main4) -}
fbfac6a98f3cbcf6bca13e2ff4d2614e
  main4 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Types.Int, ([GHC.Types.Char], GHC.Base.String))
                   @ [GHC.Types.Char]
                   Main.main5
                   Lib.menuOptions1) -}
7100ecc7e3c8ff1aa0f6781967a18543
  main5 ::
    (GHC.Types.Int, ([GHC.Types.Char], GHC.Base.String))
    -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: (GHC.Types.Int,
                          ([GHC.Types.Char], GHC.Base.String)) ->
                 case ds of wild { (,) i ds1 ->
                 case ds1 of wild1 { (,) s ds2 ->
                 case i of ww2 { GHC.Types.I# ww3 ->
                 case GHC.Show.$wshowSignedInt
                        0
                        ww3
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   (GHC.CString.unpackAppendCString# ".) "# s) } } } }) -}
7b8068760a900d1c4be78efc62b92f7a
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Enter some text to be encrypted: "#) -}
8ac9c966211266b71fbb4145718dd01b
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
27cfc217c5bcb94bcde1354230dd2604
  menu :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

